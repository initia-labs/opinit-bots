syntax = "proto3";
package celestia.blob.v1;

import "celestia/core/v1/blob/blob.proto";

option go_package = "github.com/initia-labs/opinit-bots/types/celestia";

// MsgPayForBlobs pays for the inclusion of a blob in the block.
message MsgPayForBlobs {
  // signer is the bech32 encoded signer address. See
  // https://en.bitcoin.it/wiki/Bech32.
  string signer = 1;
  // namespaces is a list of namespaces that the blobs are associated with. A
  // namespace is a byte slice of length 29 where the first byte is the
  // namespaceVersion and the subsequent 28 bytes are the namespaceId.
  repeated bytes namespaces = 2;
  // blob_sizes is a list of blob sizes (one per blob). Each size is in bytes.
  repeated uint32 blob_sizes = 3;
  // share_commitments is a list of share commitments (one per blob).
  repeated bytes share_commitments = 4;
  // share_versions are the versions of the share format that the blobs
  // associated with this message should use when included in a block. The
  // share_versions specified must match the share_versions used to generate the
  // share_commitment in this message.
  repeated uint32 share_versions = 8;
}

// MsgPayForBlobsWithBlob is a wrapper message that includes a MsgPayForBlobs
message MsgPayForBlobsWithBlob {
    MsgPayForBlobs msg_pay_for_blobs = 1;
    celestia.core.v1.blob.Blob blob = 2;
}